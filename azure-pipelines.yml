trigger:
  - master

pool:
  vmImage: 'macOS-latest'

jobs:
- job: sonar
  displayName: Analyse code with SonarQube

  steps:
  - task: SonarCloudPrepare@1
    displayName: 'Prepare SonarCloud analysis'
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'aqualityautomation'
      scannerMode: 'CLI'
      configMode: 'file'
      extraProperties: |
        sonar.coverage.exclusions=**/**

  - task: Maven@3
    displayName: 'Build project'
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'clean'

  - task: SonarCloudAnalyze@1
    displayName: 'Run SonarCloud code analysis'
    continueOnError: true

  - task: SonarCloudPublish@1
    displayName: 'Publish SonarCloud quality gate results'
    inputs:
      pollingTimeoutSec: '300'

- job: tests
  displayName: Run tests
  strategy:
    maxParallel: 2
    matrix:
      ANDROID:
        PLATFORM_NAME: android
        ANDROID_EMU_NAME: test
        ANDROID_SDK_ID: system-images;android-28;google_apis_playstore;x86
      IOS:
        PLATFORM_NAME: ios
        IOS_SIM_ID: iPhone-11, 13.4

  steps:
  - task: CmdLine@2
    displayName: 'Configure Appium'
    inputs:
      script: |
        echo "Configuring Environment"
        export PATH=$PATH:$JAVA_HOME/bin
        echo export "ANDROID_HOME=\$ANDROID_HOME" >> ~/.bash_profile
        export PATH=$PATH:$ANDROID_HOME

        echo "ANDROID_HOME: ${ANDROID_HOME}"
        echo "JAVA_HOME: ${JAVA_HOME}"
        echo "PATH: ${PATH}"

        echo "Installing Appium"
        npm install -g appium@v1.17.0
        ln -fs /usr/local/lib/node_modules/appium/build/lib/main.js /usr/local/bin/appium
        chmod +x /usr/local/bin/appium
        export PATH=$PATH:/usr/local/bin/appium
        appium --version
        echo "Appium installed"

        echo "Installing and Running Appium doctor"
        npm install -g request@2.34.0
        npm install -g appium-doctor@1.15.1
        ln -fs /usr/local/lib/node_modules/appium-doctor/appium-doctor.js /usr/local/bin/appium-doctor
        chmod +x /usr/local/bin/appium-doctor
        export PATH=$PATH:/usr/local/bin/appium-doctor
        appium-doctor
        echo "Appium doctor installed and executed"

  - task: CmdLine@2
    displayName: 'Configure and start Android emulator'
    inputs:
      script: |
        echo "ANDROID_HOME: ${ANDROID_HOME}"
        echo "y" | $ANDROID_HOME/tools/bin/sdkmanager "$(ANDROID_SDK_ID)"
        echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n "$(ANDROID_EMU_NAME)" -k "$(ANDROID_SDK_ID)" -f
        $ANDROID_HOME/emulator/emulator -list-avds

        nohup $ANDROID_HOME/emulator/emulator -avd "$(ANDROID_EMU_NAME)" -no-snapshot > /dev/null 2>&1 &
        $ANDROID_HOME/platform-tools/adb wait-for-device
        while [[ $? -ne 0 ]]; do sleep 1; $ANDROID_HOME/platform-tools/adb shell pm list packages; done;
        $ANDROID_HOME/platform-tools/adb devices
    condition: and(succeeded(), eq(variables['PLATFORM_NAME'], 'android'))

  - task: CmdLine@2
    displayName: 'Configure and start iOS simulator'
    inputs:
      script: |
        npm install -g ios-sim@9.0.0
        ios-sim showdevicetypes
        ios-sim start --devicetypeid "$(IOS_SIM_ID)"
        echo "Wait 2 minutes for simulator to be ready"
        sleep 120
    condition: and(succeeded(), eq(variables['PLATFORM_NAME'], 'ios'))

  - task: CmdLine@2
    displayName: 'Start Appium server'
    inputs:
      script: |
        appium --allow-insecure chromedriver_autodownload &
        echo "Appium server started"
    condition: succeeded()

  - task: Maven@3
    displayName: 'Run tests'
    inputs:
      mavenPomFile: 'pom.xml'
      goals: 'test -DisRemote=true -DplatformName=$(PLATFORM_NAME)'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      mavenVersionOption: 'Default'
      mavenAuthenticateFeed: false
      effectivePomSkip: false
      sonarQubeRunAnalysis: false
    condition: succeeded()

  - task: CopyFiles@2
    displayName: 'Copy failure screenshots and test logs'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/aquality-appium-mobile-template-cucumber/target'
      Contents: |
        surefire-reports/failure_screenshots/*.png
        log/*.log
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish copied artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    condition: succeededOrFailed()
